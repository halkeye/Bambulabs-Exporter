name: Build And Release
env:
  TARGET_PLATFORMS: linux/amd64,linux/arm64
on:
  pull_request: {}
  push:
    branches:
      - 'main'

permissions:
  id-token: write
  attestations: write
  contents: write
  packages: write

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        name: Checkout repository

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Release
        uses: cycjimmy/semantic-release-action@v5
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker metadata
        id: image-meta
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/metadata-action@v5
        with:
          workflow: git
          images: ghcr.io/${{ github.repository }}
          tags:
            type=semver,pattern={{version}},value=${{steps.semantic.outputs.new_release_version}}
            type=semver,pattern={{major}}.{{minor}},value=${{steps.semantic.outputs.new_release_version}}
            type=sha

      - name: Build and push docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ env.TARGET_PLATFORMS }}
          push: ${{ steps.semantic.outputs.new_release_published == 'true' }}
          tags: ${{ steps.image-meta.outputs.tags }}
          labels: ${{ steps.image-meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
